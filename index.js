const TelegramApi = require("node-telegram-bot-api");
const mongoose = require("mongoose");
const UserSchema = require("./models/UserSchema");
const express = require("express");


const token = '7351379437:AAG3HCAVluQmy2aCXIIyc60taDkdDvhYIuU'
const dbURI = 'mongodb+srv://nsewerda04:soket775@cluster0.kkg0ems.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0'
const PORT = process.env.PORT || 3000;



const bot = new TelegramApi(token);

bot.setWebHook('https://tg-bot-app-plum.vercel.app/webhook');

bot.getWebHookInfo().then((info) => {
    console.log(info);
});




let userState = {};

const userInfo = {
    id_user: "",
    name: "",
    user_name: "",
    hear_about_us: "",
    user_experience: ""
}

const app = express()

app.get("/", async (req, res) => {
    res.send("Work!");
})

app.listen(PORT, ()=> {
    console.log('Server has been working')
})


app.post('/webhook', express.json(), (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

mongoose.connect(dbURI, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err))

bot.onText(/\/start/, async (msg) => {
    userState = {}
    userInfo.name = ""
    userInfo.user_experience = ""
    userInfo.user_name = ""
    userInfo.hear_about_us = ""
    userInfo.id_user = ""
    const chatId = msg.chat.id;

    const user = await UserSchema.findOne({id_user: msg.from.id})

    if (user) {
        let main_text = "<b>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è INFINITY TEAM</b>\n\n" +
            "<b>üë§ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞</b>\n" +
            "<b>‚î£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 90%</b>\n" +
            "<b>‚î£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¢–ü: 80%</b>\n" +
            "<b>‚î£ –û–±–Ω–∞–ª: 60%</b>\n\n" +
            "<b>üìà –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã</b>\n" +
            "<b>‚î£ ESCORT</b>\n" +
            "<b>‚î£ TRADE (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
            "<b>‚î£ NFT (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
            "<b>‚î£ CASINO (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
            "<b>‚î£ EXCHANGER (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n"
        await bot.sendMessage(chatId, main_text, {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "üí¨ –û–±—â–∏–π —á–∞—Ç", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}],
                    [{text: "–í—ã–ø–ª–∞—Ç—ã üí∞", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}, {text: "–ü–∞–Ω–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã üìò", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6"}],
                    [{text: "–ú–∞–Ω—É–∞–ª—ã üìÇ", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}, {text: "–ü—Ä–∞–≤–∏–ª–∞ üìÑ", callback_data: "main_menu_rules"}],
                ]
            })})
    } else {
        let text = 'üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>INFINITY TEAM</b>\n\n' +
            `–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–æ–º–∞–Ω–¥—É`
        await bot.sendPhoto(chatId, "images/welcome.jpg", {
            caption: text,
            parse_mode: 'HTML',
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: "üó≥ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data: "apply"}],
                ]
            })
        });
    }

});

bot.on("callback_query", async (msg) => {
    const chatId = msg.message.chat.id;
    userInfo.id_user = msg.from.id;
    userInfo.user_name = msg.from.username;
    userInfo.name = msg.from.first_name;
    let message_rules_id = null;
    if (msg.data === "apply" || msg.data === "agree_rules") {
        let text = '<b>‚õîÔ∏è –ü—Ä–∞–≤–∏–ª–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è:</b>\n' +
            `<em>‚Ä¢  –ü—Ä–∏—ë–º –Ω–∞ —Å–≤–æ–∏ –∫–æ—à–µ–ª—å–∫–∏/—Ä–µ–∫–≤–∏–∑–∏—Ç—ã.</em>\n` +
            `<em>‚Ä¢  –û–±–º–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.</em>\n` +
            `<em>‚Ä¢  –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.</em>\n` +
            `<em>‚Ä¢  –ù–µ–ø–æ–¥–æ–±–∞—é—â–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. </em>\n` +
            `<em>‚Ä¢  –†–µ–∫–ª–∞–º–∞.</em>\n` +
            `<em>‚Ä¢  –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ.</em>\n` +
            `<em>‚Ä¢  –û—Ç–ø—Ä–∞–≤–∫–∞ NSFW –∏ NSFL –∫–æ–Ω—Ç–µ–Ω—Ç–∞.</em>\n` +
            `<em>‚Ä¢  –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ –ø–æ–ª–∏—Ç–∏–∫–∏/—Ä–µ–ª–∏–≥–∏–∏.</em>\n` +
            `<em>‚Ä¢  –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–µ–º-–ª–∏–±–æ –∏–∑ –°–¢–ê–§–§–ê.</em>\n` +
            `<em>‚Ä¢  –î–µ–∑–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–≥–æ –ª–∏–±–æ –æ –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∫–∞—Å–∞–µ–º–æ</em>\n` +
            `<em>INFINITY TEAM, –∏–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π, –Ω–∞—Ü–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–¥—Ä—ã–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ INFINITY TEAM.</em>\n`

        await bot.deleteMessage(chatId, msg.message.message_id)
        bot.sendMessage(chatId, text, {
            parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data: "agree_rules"}],
                ]
            })
        }).then((sentMsg) => {
            message_rules_id = sentMsg.message_id;
            let text_change = '<b>‚õîÔ∏è –ü—Ä–∞–≤–∏–ª–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è:</b>\n' +
                `<em>‚Ä¢  –ü—Ä–∏—ë–º –Ω–∞ —Å–≤–æ–∏ –∫–æ—à–µ–ª—å–∫–∏/—Ä–µ–∫–≤–∏–∑–∏—Ç—ã.</em>\n` +
                `<em>‚Ä¢  –û–±–º–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.</em>\n` +
                `<em>‚Ä¢  –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.</em>\n` +
                `<em>‚Ä¢  –ù–µ–ø–æ–¥–æ–±–∞—é—â–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. </em>\n` +
                `<em>‚Ä¢  –†–µ–∫–ª–∞–º–∞.</em>\n` +
                `<em>‚Ä¢  –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ.</em>\n` +
                `<em>‚Ä¢  –û—Ç–ø—Ä–∞–≤–∫–∞ NSFW –∏ NSFL –∫–æ–Ω—Ç–µ–Ω—Ç–∞.</em>\n` +
                `<em>‚Ä¢  –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ –ø–æ–ª–∏—Ç–∏–∫–∏/—Ä–µ–ª–∏–≥–∏–∏.</em>\n` +
                `<em>‚Ä¢  –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–µ–º-–ª–∏–±–æ –∏–∑ –°–¢–ê–§–§–ê.</em>\n` +
                `<em>‚Ä¢  –î–µ–∑–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–≥–æ –ª–∏–±–æ –æ –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∫–∞—Å–∞–µ–º–æ</em>\n` +
                `<em>INFINITY TEAM, –∏–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π, –Ω–∞—Ü–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–¥—Ä—ã–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ INFINITY TEAM.</em>\n\n` +
                `‚úÖ –í—ã –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–∞`
            if (msg.data === "agree_rules") {
                bot.editMessageText(text_change, {
                    chat_id: chatId,
                    message_id: message_rules_id,
                    parse_mode: 'HTML'
                });
                bot.sendMessage(chatId, "- –û—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?")
                userState[chatId] = {step: "hear_about_us"}
            }
        })
    } else if (msg.data === "cancel_application") {
        await bot.deleteMessage(chatId, msg.message.message_id)
        let text = 'üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ONE TEAM</b>\n\n' +
            `–ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–æ–º–∞–Ω–¥—É`
        await bot.sendMessage(chatId, text, {parse_mode: "HTML",  reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{ text: "üó≥ –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data: "apply"}],
                ]
            })});
    } else if (msg.data === "send_application") {
        await bot.deleteMessage(chatId, msg.message.message_id)
        const text = "<b>‚úàÔ∏è –î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>"
        userState = {
            step: "chat_add",
            chat: chatId
        }
        await bot.sendMessage(chatId, text, {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "üí¨ –í—Å—Ç—É–ø–∏—Ç—å –≤ —á–∞—Ç", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}],
                ]
            })})

    } else if (msg.data === "main_menu_rules") {
        await bot.deleteMessage(chatId, msg.message.message_id)
        let text_change = '<b>‚õîÔ∏è –ü—Ä–∞–≤–∏–ª–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è:</b>\n' +
            `<em>‚Ä¢  –ü—Ä–∏—ë–º –Ω–∞ —Å–≤–æ–∏ –∫–æ—à–µ–ª—å–∫–∏/—Ä–µ–∫–≤–∏–∑–∏—Ç—ã.</em>\n` +
            `<em>‚Ä¢  –û–±–º–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.</em>\n` +
            `<em>‚Ä¢  –û–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.</em>\n` +
            `<em>‚Ä¢  –ù–µ–ø–æ–¥–æ–±–∞—é—â–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. </em>\n` +
            `<em>‚Ä¢  –†–µ–∫–ª–∞–º–∞.</em>\n` +
            `<em>‚Ä¢  –ü–æ–ø—Ä–æ—à–∞–π–Ω–∏—á–µ—Å—Ç–≤–æ.</em>\n` +
            `<em>‚Ä¢  –û—Ç–ø—Ä–∞–≤–∫–∞ NSFW –∏ NSFL –∫–æ–Ω—Ç–µ–Ω—Ç–∞.</em>\n` +
            `<em>‚Ä¢  –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–∞ —Ñ–æ–Ω–µ –ø–æ–ª–∏—Ç–∏–∫–∏/—Ä–µ–ª–∏–≥–∏–∏.</em>\n` +
            `<em>‚Ä¢  –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–µ–º-–ª–∏–±–æ –∏–∑ –°–¢–ê–§–§–ê.</em>\n` +
            `<em>‚Ä¢  –î–µ–∑–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–≥–æ –ª–∏–±–æ –æ –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö –∫–∞—Å–∞–µ–º–æ</em>\n` +
            `<em>INFINITY TEAM, –∏–ª–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π, –Ω–∞—Ü–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –ø–æ–¥—Ä—ã–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ INFINITY TEAM.</em>\n\n`
        await bot.sendMessage(chatId, text_change, {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚Ü© –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data: "main_menu"}],
                ]
            })})
    } else if (msg.data === "main_menu") {
        await bot.deleteMessage(chatId, msg.message.message_id)
        let main_text = "<b>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è INFINITY TEAM</b>\n\n" +
            "<b>üë§ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞</b>\n" +
            "<b>‚î£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 90%</b>\n" +
            "<b>‚î£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¢–ü: 80%</b>\n" +
            "<b>‚î£ –û–±–Ω–∞–ª: 60%</b>\n\n" +
            "<b>üìà –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã</b>\n" +
            "<b>‚î£ ESCORT</b>\n" +
            "<b>‚î£ TRADE (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
            "<b>‚î£ NFT (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
            "<b>‚î£ CASINO (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
            "<b>‚î£ EXCHANGER (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n"
        await bot.sendMessage(chatId, main_text, {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "üí¨ –û–±—â–∏–π —á–∞—Ç", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}],
                    [{text: "–í—ã–ø–ª–∞—Ç—ã üí∞", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}, {text: "–ü–∞–Ω–µ–ª—å –¥–ª—è —Ä–æ–±–æ—Ç—ã üìò", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6"}],
                    [{text: "–ú–∞–Ω—É–∞–ª—ã üìÇ", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}, {text: "–ü—Ä–∞–≤–∏–ª–∞ üìÑ", callback_data: "main_menu_rules"}],
                ]
            })})
    }
})

bot.on("message", async (msg) => {
    const chatId = msg.chat.id;
    if (userState[chatId]?.step === "hear_about_us") {
        userInfo.hear_about_us = msg.text;
        await bot.sendMessage(chatId, "- –ò–º–µ–µ—Ç—Å—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ –¥–∞–Ω–Ω–æ–π —Å—Ñ–µ—Ä–µ?")
        userState[chatId].step = "user_experience"
    } else if (userState[chatId]?.step === "user_experience") {
        userInfo.user_experience = msg.text;
        await bot.sendMessage(chatId, "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
        const text = "<b>üìÉ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≥–æ—Ç–æ–≤–∞</b>\n\n" +
            `–û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: ${userInfo.hear_about_us}\n\n` +
            `–û–ø—ã—Ç: ${userInfo.user_experience}\n\n` +
            "<b>‚ùó –ü—Ä–æ—à—É –Ω–µ —Å–ø–∞–º–∏—Ç—å –∑–∞—è–≤–∫–∞–º–∏, –º—ã –≤–∏–¥–∏–º –∫–∞–∂–¥—É—é –∑–∞—è–≤–∫—É, –≤ —Å–ª—É—á–∞–µ —Å–ø–∞–º–∞ –≤—ã –±—É–¥–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã ‚ùó</b>"
        await bot.sendMessage(chatId, text, {parse_mode: "HTML", reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{text: "‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data: "send_application"}],
                    [{text: "‚ùå –û—Ç–º–µ–Ω–∞", callback_data: "cancel_application"}]
                ]
            })})
    }
})



bot.on('message',  (msg) => {
    if ((msg.chat.type === 'group' || msg.chat.type === 'supergroup') && userState.step === "chat_add") {
        const group_chat_id = msg.chat.id;
        bot.getChatMember(group_chat_id, userInfo.id_user).then((chatMember) => {
            if (chatMember.status === 'member' || chatMember.status === 'administrator' || chatMember.status === 'creator') {
                console.log(userInfo)
                const user = new UserSchema(userInfo)
                user.save()
                bot.sendMessage(userState.chat, "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>", {parse_mode: "HTML"}).then(()=> {
                    let main_text = "<b>üåê –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è INFINITY TEAM</b>\n\n" +
                        "<b>üë§ –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤–æ—Ä–∫–µ—Ä–∞</b>\n" +
                        "<b>‚î£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: 90%</b>\n" +
                        "<b>‚î£ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¢–ü: 80%</b>\n" +
                        "<b>‚î£ –û–±–Ω–∞–ª: 60%</b>\n\n" +
                        "<b>üìà –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã</b>\n" +
                        "<b>‚î£ ESCORT</b>\n" +
                        "<b>‚î£ TRADE (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
                        "<b>‚î£ NFT (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
                        "<b>‚î£ CASINO (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n" +
                        "<b>‚î£ EXCHANGER (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ) </b>\n"
                     bot.sendMessage(userState.chat, main_text, {parse_mode: "HTML", reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [{text: "üí¨ –û–±—â–∏–π —á–∞—Ç", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}],
                                [{text: "–í—ã–ø–ª–∞—Ç—ã üí∞", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}, {text: "–ü–∞–Ω–µ–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã üìò", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6"}],
                                [{text: "–ú–∞–Ω—É–∞–ª—ã üìÇ", url: "https://t.me/+7lDgYSLAg3Q1ZWQ6", callback_data: "chat"}, {text: "–ü—Ä–∞–≤–∏–ª–∞ üìÑ", callback_data: "main_menu_rules"}],
                            ]
                        })})
                })
                userState.step = "main_menu";
            } else {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞.');
            }
        }).catch((error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', error);
        });
    }
});


